#!/bin/sh
#
#Tomas Lapsansky
#FIT VUT Brno
#1.projekt IOS

POSIXLY_CORRECT=yes

N_flag=0
I_flag=0
FILE_ERE=0
DIR=$PWD

true_num_of_args=$#
num_of_args=0

while getopts ":ni:" o; do
    case "${o}" in
        i)
        	I_flag=1
            FILE_ERE="${OPTARG}"
            ((num_of_args = num_of_args + 2))
            ;;
        n)
            N_flag=1
			((num_of_args++))
            ;;
        *)
            ;;
    esac
done

#for last $DIR argument without -
if [ $# -eq 0 ]
then
	DIR=$PWD
else
	((OPTIND--))
	shift $OPTIND
	
	if [ -d "$*" ]
	then
		((num_of_args++))
		DIR="$*"
	fi
fi

if [ -z "$DIR" ]
then
	DIR=$PWD
	((num_of_args--))
fi

if [ "$num_of_args" -ne "$true_num_of_args" ]
then
	echo "Chyba parametrov" >&2
	exit 1
fi

if [ $I_flag -eq 0 ]
then
	ND=`find $DIR -type d | wc -l`
	if [ -z $ND ]
	then
		echo "Chyba adresara." >&2
		exit 1
	fi
	
	NF=`find $DIR -type f | wc -l`
	if [ -z $NF ]
	then
		echo "Chyba adresara." >&2
		exit 1
	fi
	
	FSHIST[0]=`find $DIR -type f -size -100c | wc -l`
	FSHIST[1]=`find $DIR -type f -size -1024c | wc -l`
	FSHIST[2]=`find $DIR -type f -size -10240c | wc -l`
	FSHIST[3]=`find $DIR -type f -size -102400c | wc -l`
	FSHIST[4]=`find $DIR -type f -size -1048576c | wc -l`
	FSHIST[5]=`find $DIR -type f -size -10485760c | wc -l`
	FSHIST[6]=`find $DIR -type f -size -104857600c | wc -l`
	FSHIST[7]=`find $DIR -type f -size -1073741824c | wc -l`
	FSHIST[8]=`find $DIR -type f -size +1073741824c | wc -l`
else
	ND=`find $DIR -type d | grep -v "$FILE_ERE" | wc -l`
	NF=`find $DIR -type f | grep -v "$FILE_ERE" | wc -l`
	FSHIST[0]=`find $DIR -type f -size -100c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[1]=`find $DIR -type f -size -1024c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[2]=`find $DIR -type f -size -10240c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[3]=`find $DIR -type f -size -102400c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[4]=`find $DIR -type f -size -1048576c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[5]=`find $DIR -type f -size -10485760c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[6]=`find $DIR -type f -size -104857600c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[7]=`find $DIR -type f -size -1073741824c | grep -v "$FILE_ERE" | wc -l`
	FSHIST[8]=`find $DIR -type f -size +1073741823c | grep -v "$FILE_ERE" | wc -l`
fi

((FSHIST[7] = FSHIST[7] - FSHIST[6]))
((FSHIST[6] = FSHIST[6] - FSHIST[5]))
((FSHIST[5] = FSHIST[5] - FSHIST[4]))
((FSHIST[4] = FSHIST[4] - FSHIST[3]))
((FSHIST[3] = FSHIST[3] - FSHIST[2]))
((FSHIST[2] = FSHIST[2] - FSHIST[1]))
((FSHIST[1] = FSHIST[1] - FSHIST[0]))


#FSHIST[8]=`find $DIR -type f -size +1073741824c | wc -l`

#input=`find $DIR -type f -exec file -b {} \;| sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//'`
if [ $I_flag -eq 0 ]
then
	input_name=`find $DIR -type f -exec file -b {} \;| sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//' | cut -d' ' -f 2-`
	input_index=`find $DIR -type f -exec file -b {} \;| sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//' | cut -d' ' -f1`
else
	#input_name=`find "${DIR}" -type f ! -iregex "${FILE_ERE}" -exec file -b {} + | sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//' | cut -d' ' -f 2-`
	#input_index=`find "${DIR}" -type f ! -iregex "${FILE_ERE}" -exec file -b {} + | sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//' | cut -d' ' -f1`
	input_name=$(file -b `find $DIR -type f | grep -v "$FILE_ERE"` | sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//' | cut -d' ' -f 2-)
	input_index=$(file -b `find $DIR -type f | grep -v "$FILE_ERE"` | sort | uniq -c | sort -n -r | head | sed 's/^[ \t]*//' | cut -d' ' -f1)
fi

#vypis
echo "Root directory: $DIR"
echo "Directories: $ND"
echo "All files: $NF"
echo "File size histogram:"

if [ $N_flag -eq 0 ]
then
	printf "  <100 B  : "
	for((i = 0; i < ${FSHIST[0]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <1 KiB  : "
	for((i = 0; i < ${FSHIST[1]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <10 KiB : "
	for((i = 0; i < ${FSHIST[2]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <100 KiB: "
	for((i = 0; i < ${FSHIST[3]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <1 MiB  : "
	for((i = 0; i < ${FSHIST[4]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <10 MiB : "
	for((i = 0; i < ${FSHIST[5]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <100 MiB: "
	for((i = 0; i < ${FSHIST[6]}; i++))
	do
		printf "#"
	done
	echo
	printf "  <1 GiB  : "
	for((i = 0; i < ${FSHIST[7]}; i++))
	do
		printf "#"
	done
	echo
	printf "  >=1 GiB : "
	for((i = 0; i < ${FSHIST[8]}; i++))
	do
		printf "#"
	done
	echo
else
	if [ -t 1 ];
	then
		cols=`tput cols`
		((cols--))
	else
		cols=79
	fi
	
	((cols = cols - 12))
	
	FSHIST_MAX=0
	for((i = 0; i < 9; i++))
	do
		if((FSHIST[i] > FSHIST[FSHIST_MAX]))
		then
			FSHIST_MAX=$i
		fi
	done
	
	rate=0
	if ((FSHIST[FSHIST_MAX] > cols))
	then
		rate=1
	fi
	
	MAX=${FSHIST[FSHIST_MAX]}
	if [ $rate -ne 0 ]
	then
	for ((i=0; i < 9; i++))
		do
			((FSHIST[i] = ((cols * FSHIST[i])) / MAX))
		done
	fi 
	
	printf "  <100 B  : "
	for((i = 0; i < ${FSHIST[0]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <1 KiB  : "
	for((i = 0; i < ${FSHIST[1]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <10 KiB : "
	for((i = 0; i < ${FSHIST[2]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <100 KiB: "
	for((i = 0; i < ${FSHIST[3]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <1 MiB  : "
	for((i = 0; i < ${FSHIST[4]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <10 MiB : "
	for((i = 0; i < ${FSHIST[5]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <100 MiB: "
	for((i = 0; i < ${FSHIST[6]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  <1 GiB  : "
	for((i = 0; i < ${FSHIST[7]} && i < cols; i++))
	do
		printf "#"
	done
	echo
	printf "  >=1 GiB : "
	for((i = 0; i < ${FSHIST[8]} && i < cols; i++))
	do
		printf "#"
	done
	echo
fi

echo "File type histogram:"

if [ $NF -ne 0 ]
then
	if [ $N_flag -eq 0 ]
	then
		array_index=1
		printf '%s\n' "$input_name" | while IFS= read -r line
		do
			index=`sed -n ${array_index}p <<< "$input_index"`
			if [ ${#line} -gt 40 ]
			then
				printf "  %.40s...: " "$line"
			else
				printf "  %-43s: " "$line"
			fi
			for((i=0; i<$index; i++))
			do
   				printf "#"
			done
			echo
			((array_index++))
		done
	else
	
		if [ -t 1 ];
		then
			cols=`tput cols`
			((cols--))
		else
			cols=79
		fi
		((cols = cols - 47))
		
		rate=0
		first_index=`sed -n 1p <<< "$input_index"`
		if ((first_index > cols))
		then
			rate=1
		fi
		
		array_index=1
		printf '%s\n' "$input_name" | while IFS= read -r line
		do
			index=`sed -n ${array_index}p <<< "$input_index"`
			if [ $rate -ne 0 ]
			then
				((index = ((cols * index)) / first_index))
			fi
			if [ ${#line} -gt 40 ]
			then
				printf "  %.40s...: " "$line"
			else
				printf "  %-43s: " "$line"
			fi
			for((i=0; i<$index && i<$cols; i++))
			do
   				printf "#"
			done
			echo
			((array_index++))
		done
	fi
fi
